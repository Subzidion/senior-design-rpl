{"cpp.line_comments":{"pos":1,"text":"\/*******************************************************************************\r\n *  Project: libopencad\r\n *  Purpose: OpenSource CAD formats support library\r\n *  Author: Alexandr Borzykh, mush3d at gmail.com\r\n *  Author: Dmitry Baryshnikov, bishop.dev@gmail.com\r\n *  Language: C++\r\n *******************************************************************************\r\n *  The MIT License (MIT)\r\n *\r\n *  Copyright (c) 2016 Alexandr Borzykh\r\n *  Copyright (c) 2016 NextGIS, <info@nextgis.com>\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"Software\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in all\r\n *  copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n *  SOFTWARE.\r\n *******************************************************************************\/\r\n#include \"cadfile.h\"\r\n#include \"opencad_api.h\"\r\n\r\n#include <iostream>\r\n\r\nCADFile::CADFile( CADFileIO * poFileIO )\r\n{\r\n    pFileIO = poFileIO;\r\n}\r\n\r\nCADFile::~CADFile()\r\n{\r\n    if( nullptr != pFileIO )\r\n        delete pFileIO;\r\n}\r\n\r\nconst CADHeader& CADFile::getHeader() const\r\n{\r\n    return oHeader;\r\n}\r\n\r\nconst CADClasses& CADFile::getClasses() const\r\n{\r\n    return oClasses;\r\n}\r\n\r\nconst CADTables& CADFile::getTables() const\r\n{\r\n    return oTables;\r\n}\r\n\r\nint CADFile::ParseFile( enum OpenOptions eOptions, bool bReadUnsupportedGeometries )\r\n{\r\n    if( nullptr == pFileIO )\r\n        return CADErrorCodes::FILE_OPEN_FAILED; \/\/ Comment\r\n\r\n    if( !pFileIO->IsOpened() )\r\n    {\r\n        if( !pFileIO->Open( CADFileIO::read | CADFileIO::binary ) )\r\n            return CADErrorCodes::FILE_OPEN_FAILED;\r\n    }\r\n\r\n    \/\/ Set flag which will tell CADLayer to skip\/not skip unsupported geoms\r\n    bReadingUnsupportedGeometries = bReadUnsupportedGeometries;\r\n\r\n    int nResultCode;\r\n    nResultCode = ReadSectionLocators();\r\n    if( nResultCode != CADErrorCodes::SUCCESS )\r\n        return nResultCode;\r\n    nResultCode = ReadHeader( eOptions );\r\n    if( nResultCode != CADErrorCodes::SUCCESS )\r\n        return nResultCode;\r\n    nResultCode = ReadClasses( eOptions );\r\n    if( nResultCode != CADErrorCodes::SUCCESS )\r\n        return nResultCode;\r\n    nResultCode = CreateFileMap();\r\n    if( nResultCode != CADErrorCodes::SUCCESS )\r\n        return nResultCode;\r\n    nResultCode = ReadTables( eOptions );\r\n    if( nResultCode != CADErrorCodes::SUCCESS )\r\n        return nResultCode;\r\n\r\n    return CADErrorCodes::SUCCESS;\r\n}\r\n\r\nint CADFile::ReadTables( CADFile::OpenOptions \/*eOptions*\/ )\r\n{\r\n    \/\/ TODO: read other tables in ALL option mode\r\n\r\n    int nResult = oTables.ReadTable( this, CADTables::LayersTable );\r\n\/\/    if(nResult != CADErrorCodes::SUCCESS)\r\n    return nResult;\r\n\r\n}\r\n\r\nsize_t CADFile::GetLayersCount() const\r\n{\r\n    return oTables.GetLayerCount();\r\n}\r\n\r\nCADLayer& CADFile::GetLayer( size_t index )\r\n{\r\n    return oTables.GetLayer( index );\r\n}\r\n\r\nbool CADFile::isReadingUnsupportedGeometries()\r\n{\r\n    return bReadingUnsupportedGeometries;\r\n}\r\n","subs":[{"cpp.line_comment":{"pos":2258,"text":"        return CADErrorCodes::FILE_OPEN_FAILED; \/\/ Comment\r","subs":[{"cpp.line_comment_context":{"pos":2258,"text":"        return CADErrorCodes::FILE_OPEN_FAILED; "}},{"cpp.line_comment_body":{"pos":2306,"text":"\/\/ Comment\r","subs":[{"cpp.line_comment_text":{"pos":2308,"text":" Comment\r"}}]}}]}},{"cpp.line_comment":{"pos":2490,"text":"    \/\/ Set flag which will tell CADLayer to skip\/not skip unsupported geoms\r","subs":[{"cpp.line_comment_context":{"pos":2490,"text":"    "}},{"cpp.line_comment_body":{"pos":2494,"text":"\/\/ Set flag which will tell CADLayer to skip\/not skip unsupported geoms\r","subs":[{"cpp.line_comment_text":{"pos":2496,"text":" Set flag which will tell CADLayer to skip\/not skip unsupported geoms\r"}}]}}]}},{"cpp.line_comment":{"pos":3362,"text":"    \/\/ TODO: read other tables in ALL option mode\r","subs":[{"cpp.line_comment_context":{"pos":3362,"text":"    "}},{"cpp.line_comment_body":{"pos":3366,"text":"\/\/ TODO: read other tables in ALL option mode\r","subs":[{"cpp.line_comment_text":{"pos":3368,"text":" TODO: read other tables in ALL option mode\r"}}]}}]}},{"cpp.line_comment":{"pos":3485,"text":"\/\/    if(nResult != CADErrorCodes::SUCCESS)\r","subs":[{"cpp.line_comment_context":{"pos":3485,"text":""}},{"cpp.line_comment_body":{"pos":3485,"text":"\/\/    if(nResult != CADErrorCodes::SUCCESS)\r","subs":[{"cpp.line_comment_text":{"pos":3487,"text":"    if(nResult != CADErrorCodes::SUCCESS)\r"}}]}}]}}]}}
