{
	"j_comments" : {
		"text" : "\/*\n * The MIT License\n *\n * Copyright (c) 2011, CloudBees, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\/\npackage jenkins.security;\n\nimport hudson.Extension;\nimport jenkins.util.SystemProperties;\nimport hudson.Util;\nimport hudson.model.Descriptor.FormException;\nimport hudson.model.User;\nimport hudson.model.UserProperty;\nimport hudson.model.UserPropertyDescriptor;\nimport hudson.security.ACL;\nimport hudson.util.HttpResponses;\nimport hudson.util.Secret;\nimport jenkins.model.Jenkins;\nimport net.sf.json.JSONObject;\nimport org.jenkinsci.Symbol;\nimport org.kohsuke.stapler.AncestorInPath;\nimport org.kohsuke.stapler.DataBoundConstructor;\nimport org.kohsuke.stapler.HttpResponse;\nimport org.kohsuke.stapler.StaplerRequest;\nimport org.kohsuke.stapler.StaplerResponse;\n\nimport java.io.IOException;\nimport java.nio.charset.Charset;\nimport java.security.MessageDigest;\nimport java.security.SecureRandom;\nimport javax.annotation.Nonnull;\nimport org.apache.commons.lang.StringUtils;\nimport org.kohsuke.accmod.Restricted;\nimport org.kohsuke.accmod.restrictions.NoExternalUse;\n\n\/**\n * Remembers the API token for this user, that can be used like a password to login.\n *\n *\n * @author Kohsuke Kawaguchi\n * @see ApiTokenFilter\n * @since 1.426\n *\/\npublic class ApiTokenProperty extends UserProperty {\n    private volatile Secret apiToken;\n\n    \/**\n     * If enabled, shows API tokens to users with {@link Jenkins#ADMINISTER) permissions.\n     * Disabled by default due to the security reasons.\n     * If enabled, it restores the original Jenkins behavior (SECURITY-200).\n     * @since 1.638\n     *\/\n    private static final boolean SHOW_TOKEN_TO_ADMINS = \n            SystemProperties.getBoolean(ApiTokenProperty.class.getName() + \".showTokenToAdmins\");\n    \n    \n    @DataBoundConstructor\n    public ApiTokenProperty() {\n        _changeApiToken();\n    }\n\n    \/**\n     * We don't let the external code set the API token,\n     * but for the initial value of the token we need to compute the seed by ourselves.\n     *\/\n    \/*package*\/ ApiTokenProperty(String seed) {\n        apiToken = Secret.fromString(seed);\n    }\n\n    \/**\n     * Gets the API token.\n     * The method performs security checks since 1.638. Only the current user and SYSTEM may see it.\n     * Users with {@link Jenkins#ADMINISTER} may be allowed to do it using {@link #SHOW_TOKEN_TO_ADMINS}.\n     * \n     * @return API Token. Never null, but may be {@link Messages#ApiTokenProperty_ChangeToken_TokenIsHidden()}\n     *         if the user has no appropriate permissions.\n     * @since 1.426, and since 1.638 the method performs security checks\n     *\/\n    @Nonnull\n    public String getApiToken() {\n        return hasPermissionToSeeToken() ? getApiTokenInsecure() \n                : Messages.ApiTokenProperty_ChangeToken_TokenIsHidden();\n    }\n    \n    @Nonnull\n    @Restricted(NoExternalUse.class)\n    \/*package*\/ String getApiTokenInsecure() {\n        String p = apiToken.getPlainText();\n        if (p.equals(Util.getDigestOf(Jenkins.getInstance().getSecretKey()+\":\"+user.getId()))) {\n            \/\/ if the current token is the initial value created by pre SECURITY-49 Jenkins, we can't use that.\n            \/\/ force using the newer value\n            apiToken = Secret.fromString(p=API_KEY_SEED.mac(user.getId()));\n        }\n        return Util.getDigestOf(p);\n    }\n\n    public boolean matchesPassword(String password) {\n        String token = getApiTokenInsecure();\n        \/\/ String.equals isn't constant time, but this is\n        return MessageDigest.isEqual(password.getBytes(Charset.forName(\"US-ASCII\")),\n                token.getBytes(Charset.forName(\"US-ASCII\")));\n    }\n    \n    private boolean hasPermissionToSeeToken() {\n        final Jenkins jenkins = Jenkins.getInstance();\n\n        \/\/ Administrators can do whatever they want\n        if (SHOW_TOKEN_TO_ADMINS && jenkins.hasPermission(Jenkins.ADMINISTER)) {\n            return true;\n        }\n        \n        \n        final User current = User.current();\n        if (current == null) { \/\/ Anonymous\n            return false;\n        }\n        \n        \/\/ SYSTEM user is always eligible to see tokens\n        if (Jenkins.getAuthentication() == ACL.SYSTEM) {\n            return true;\n        }\n             \n        \/\/TODO: replace by IdStrategy in newer Jenkins versions\n        \/\/return User.idStrategy().equals(user.getId(), current.getId());\n        return StringUtils.equals(user.getId(), current.getId());\n    }\n\n    public void changeApiToken() throws IOException {\n        user.checkPermission(Jenkins.ADMINISTER);\n        _changeApiToken();\n        user.save();\n    }\n\n    private void _changeApiToken() {\n        byte[] random = new byte[16];   \/\/ 16x8=128bit worth of randomness, since we use md5 digest as the API token\n        RANDOM.nextBytes(random);\n        apiToken = Secret.fromString(Util.toHexString(random));\n    }\n\n    @Override\n    public UserProperty reconfigure(StaplerRequest req, JSONObject form) throws FormException {\n        return this;\n    }\n\n    @Extension @Symbol(\"apiToken\")\n    public static final class DescriptorImpl extends UserPropertyDescriptor {\n        public String getDisplayName() {\n            return Messages.ApiTokenProperty_DisplayName();\n        }\n\n        \/**\n         * When we are creating a default {@link ApiTokenProperty} for User,\n         * we need to make sure it yields the same value for the same user,\n         * because there's no guarantee that the property is saved.\n         *\n         * But we also need to make sure that an attacker won't be able to guess\n         * the initial API token value. So we take the seed by hashing the secret + user ID.\n         *\/\n        public ApiTokenProperty newInstance(User user) {\n            return new ApiTokenProperty(API_KEY_SEED.mac(user.getId()));\n        }\n\n        public HttpResponse doChangeToken(@AncestorInPath User u, StaplerResponse rsp) throws IOException {\n            ApiTokenProperty p = u.getProperty(ApiTokenProperty.class);\n            if (p==null) {\n                p = newInstance(u);\n                u.addProperty(p);\n            } else {\n                p.changeApiToken();\n            }\n            rsp.setHeader(\"script\",\"document.getElementById('apiToken').value='\"+p.getApiToken()+\"'\");\n            return HttpResponses.html(p.hasPermissionToSeeToken() \n                    ? Messages.ApiTokenProperty_ChangeToken_Success() \n                    : Messages.ApiTokenProperty_ChangeToken_SuccessHidden());\n        }\n    }\n\n    private static final SecureRandom RANDOM = new SecureRandom();\n\n    \/**\n     * We don't want an API key that's too long, so cut the length to 16 (which produces 32-letter MAC code in hexdump)\n     *\/\n    private static final HMACConfidentialKey API_KEY_SEED = new HMACConfidentialKey(ApiTokenProperty.class,\"seed\",16);\n",
		"subs" : [{
				"j_comment_inline" : {
					"text" : "            \/\/ if the current token is the initial value created by pre SECURITY-49 Jenkins, we can't use that.",
					"subs" : [{
							"j_comment_context" : {
								"text" : "            ",
								"pos" : 4077
							}
						}, {
							"j_comment_body" : {
								"text" : "\/\/ if the current token is the initial value created by pre SECURITY-49 Jenkins, we can't use that.",
								"subs" : [{
										"j_comment_start" : {
											"text" : "\/\/",
											"pos" : 4089
										}
									}, {
										"j_comment_text" : {
											"text" : " if the current token is the initial value created by pre SECURITY-49 Jenkins, we can't use that.",
											"pos" : 4091
										}
									}
								],
								"pos" : 4089
							}
						}
					],
					"pos" : 4077
				}
			}, {
				"j_comment_inline" : {
					"text" : "            \/\/ force using the newer value",
					"subs" : [{
							"j_comment_context" : {
								"text" : "            ",
								"pos" : 4189
							}
						}, {
							"j_comment_body" : {
								"text" : "\/\/ force using the newer value",
								"subs" : [{
										"j_comment_start" : {
											"text" : "\/\/",
											"pos" : 4201
										}
									}, {
										"j_comment_text" : {
											"text" : " force using the newer value",
											"pos" : 4203
										}
									}
								],
								"pos" : 4201
							}
						}
					],
					"pos" : 4189
				}
			}, {
				"j_comment_inline" : {
					"text" : "        \/\/ String.equals isn't constant time, but this is",
					"subs" : [{
							"j_comment_context" : {
								"text" : "        ",
								"pos" : 4461
							}
						}, {
							"j_comment_body" : {
								"text" : "\/\/ String.equals isn't constant time, but this is",
								"subs" : [{
										"j_comment_start" : {
											"text" : "\/\/",
											"pos" : 4469
										}
									}, {
										"j_comment_text" : {
											"text" : " String.equals isn't constant time, but this is",
											"pos" : 4471
										}
									}
								],
								"pos" : 4469
							}
						}
					],
					"pos" : 4461
				}
			}, {
				"j_comment_inline" : {
					"text" : "        \/\/ Administrators can do whatever they want",
					"subs" : [{
							"j_comment_context" : {
								"text" : "        ",
								"pos" : 4781
							}
						}, {
							"j_comment_body" : {
								"text" : "\/\/ Administrators can do whatever they want",
								"subs" : [{
										"j_comment_start" : {
											"text" : "\/\/",
											"pos" : 4789
										}
									}, {
										"j_comment_text" : {
											"text" : " Administrators can do whatever they want",
											"pos" : 4791
										}
									}
								],
								"pos" : 4789
							}
						}
					],
					"pos" : 4781
				}
			}, {
				"j_comment_inline" : {
					"text" : "        if (current == null) { \/\/ Anonymous",
					"subs" : [{
							"j_comment_context" : {
								"text" : "        if (current == null) { ",
								"pos" : 5012
							}
						}, {
							"j_comment_body" : {
								"text" : "\/\/ Anonymous",
								"subs" : [{
										"j_comment_start" : {
											"text" : "\/\/",
											"pos" : 5043
										}
									}, {
										"j_comment_text" : {
											"text" : " Anonymous",
											"pos" : 5045
										}
									}
								],
								"pos" : 5043
							}
						}
					],
					"pos" : 5012
				}
			}, {
				"j_comment_inline" : {
					"text" : "        \/\/ SYSTEM user is always eligible to see tokens",
					"subs" : [{
							"j_comment_context" : {
								"text" : "        ",
								"pos" : 5101
							}
						}, {
							"j_comment_body" : {
								"text" : "\/\/ SYSTEM user is always eligible to see tokens",
								"subs" : [{
										"j_comment_start" : {
											"text" : "\/\/",
											"pos" : 5109
										}
									}, {
										"j_comment_text" : {
											"text" : " SYSTEM user is always eligible to see tokens",
											"pos" : 5111
										}
									}
								],
								"pos" : 5109
							}
						}
					],
					"pos" : 5101
				}
			}, {
				"j_comment_inline" : {
					"text" : "        \/\/TODO: replace by IdStrategy in newer Jenkins versions",
					"subs" : [{
							"j_comment_context" : {
								"text" : "        ",
								"pos" : 5263
							}
						}, {
							"j_comment_body" : {
								"text" : "\/\/TODO: replace by IdStrategy in newer Jenkins versions",
								"subs" : [{
										"j_comment_start" : {
											"text" : "\/\/",
											"pos" : 5271
										}
									}, {
										"j_comment_text" : {
											"text" : "TODO: replace by IdStrategy in newer Jenkins versions",
											"pos" : 5273
										}
									}
								],
								"pos" : 5271
							}
						}
					],
					"pos" : 5263
				}
			}, {
				"j_comment_inline" : {
					"text" : "        \/\/return User.idStrategy().equals(user.getId(), current.getId());",
					"subs" : [{
							"j_comment_context" : {
								"text" : "        ",
								"pos" : 5327
							}
						}, {
							"j_comment_body" : {
								"text" : "\/\/return User.idStrategy().equals(user.getId(), current.getId());",
								"subs" : [{
										"j_comment_start" : {
											"text" : "\/\/",
											"pos" : 5335
										}
									}, {
										"j_comment_text" : {
											"text" : "return User.idStrategy().equals(user.getId(), current.getId());",
											"pos" : 5337
										}
									}
								],
								"pos" : 5335
							}
						}
					],
					"pos" : 5327
				}
			}, {
				"j_comment_inline" : {
					"text" : "        byte[] random = new byte[16];   \/\/ 16x8=128bit worth of randomness, since we use md5 digest as the API token",
					"subs" : [{
							"j_comment_context" : {
								"text" : "        byte[] random = new byte[16];   ",
								"pos" : 5670
							}
						}, {
							"j_comment_body" : {
								"text" : "\/\/ 16x8=128bit worth of randomness, since we use md5 digest as the API token",
								"subs" : [{
										"j_comment_start" : {
											"text" : "\/\/",
											"pos" : 5710
										}
									}, {
										"j_comment_text" : {
											"text" : " 16x8=128bit worth of randomness, since we use md5 digest as the API token",
											"pos" : 5712
										}
									}
								],
								"pos" : 5710
							}
						}
					],
					"pos" : 5670
				}
			}
		],
		"pos" : 1
	}
}
