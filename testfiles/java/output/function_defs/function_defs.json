{"java.function":{"text":"    boolean matchesPassword(String password, String username) {\n        String token = getApiTokenInsecure();\n        \/\/ String.equals isn't constant time, but this is\n        return MessageDigest.isEqual(password.getBytes(Charset.forName(\"US-ASCII\")),\n                token.getBytes(Charset.forName(\"US-ASCII\")));\n    }\n\n    private boolean hasPermissionToSeeToken(String temp) {\n        final Jenkins jenkins = Jenkins.getInstance();\n\n        \/\/ Administrators can do whatever they want\n        if (SHOW_TOKEN_TO_ADMINS && jenkins.hasPermission(Jenkins.ADMINISTER)) {\n            return true;\n        }\n\n\n        final User current = User.current();\n        if (current == null) { \/\/ Anonymous\n            return false;\n        }\n\n        \/\/ SYSTEM user is always eligible to see tokens\n        if (Jenkins.getAuthentication() == ACL.SYSTEM) {\n            return true;\n        }\n\n        \/\/TODO: replace by IdStrategy in newer Jenkins versions\n        \/\/return User.idStrategy().equals(user.getId(), current.getId());\n        return StringUtils.equals(user.getId(), current.getId());\n    }\n\n    public static void changeApiToken() throws IOException {\n        user.checkPermission(Jenkins.ADMINISTER);\n        _changeApiToken();\n        user.save();\n    }\n\n    private void _changeApiToken() {\n        byte[] random = new byte[16];   \/\/ 16x8=128bit worth of randomness, since we use md5 digest as the API token\n        RANDOM.nextBytes(random);\n        apiToken = Secret.fromString(Util.toHexString(random));\n    }\n\n    @Override\n    public UserProperty reconfigure(StaplerRequest req, JSONObject form) throws FormException {\n        return this;\n    }\n","pos":1,"subs":[{"java.function_call":{"text":"    boolean matchesPassword(String password, String username)","pos":1,"subs":[{"java.return_type":{"text":"","pos":1}},{"java.function_name":{"text":"    boolean matchesPassword","pos":1}},{"java.parameters":{"text":"(String password, String username)","pos":28,"subs":[{"java.single_param":{"text":"String password","pos":29}},{"java.single_param":{"text":" String username","pos":45}}]}}]}},{"java.function_body":{"text":" {\n        String token = getApiTokenInsecure();\n        \/\/ String.equals isn't constant time, but this is\n        return MessageDigest.isEqual(password.getBytes(Charset.forName(\"US-ASCII\")),\n                token.getBytes(Charset.forName(\"US-ASCII\")));\n    }","pos":62,"subs":[{"java.function_body_clean":{"text":"        String token = getApiTokenInsecure();\n        \/\/ String.equals isn't constant time, but this is\n        return MessageDigest.isEqual(password.getBytes(Charset.forName(\"US-ASCII\")),\n                token.getBytes(Charset.forName(\"US-ASCII\")));\n    ","pos":65}}]}},{"java.function_call":{"text":"\n\n    private boolean hasPermissionToSeeToken(String temp)","pos":321,"subs":[{"java.return_type":{"text":"","pos":321}},{"java.function_name":{"text":"\n\n    private boolean hasPermissionToSeeToken","pos":321}},{"java.parameters":{"text":"(String temp)","pos":366,"subs":[{"java.single_param":{"text":"String temp","pos":367}}]}}]}},{"java.function_body":{"text":" {\n        final Jenkins jenkins = Jenkins.getInstance();\n\n        \/\/ Administrators can do whatever they want\n        if (SHOW_TOKEN_TO_ADMINS && jenkins.hasPermission(Jenkins.ADMINISTER)) {\n            return true;\n        }","pos":379,"subs":[{"java.function_body_clean":{"text":"        final Jenkins jenkins = Jenkins.getInstance();\n\n        \/\/ Administrators can do whatever they want\n        if (SHOW_TOKEN_TO_ADMINS && jenkins.hasPermission(Jenkins.ADMINISTER)) {\n            return true;\n        ","pos":382}}]}},{"java.function_call":{"text":"user.save();\n    }\n\n    private void _changeApiToken()","pos":1240,"subs":[{"java.return_type":{"text":"user.save();","pos":1240}},{"java.function_name":{"text":"\n    }\n\n    private void _changeApiToken","pos":1252}},{"java.parameters":{"text":"()","pos":1292,"subs":[{"java.single_param":{"text":"","pos":1293}}]}}]}},{"java.function_body":{"text":" {\n        byte[] random = new byte[16];   \/\/ 16x8=128bit worth of randomness, since we use md5 digest as the API token\n        RANDOM.nextBytes(random);\n        apiToken = Secret.fromString(Util.toHexString(random));\n    }","pos":1294,"subs":[{"java.function_body_clean":{"text":"        byte[] random = new byte[16];   \/\/ 16x8=128bit worth of randomness, since we use md5 digest as the API token\n        RANDOM.nextBytes(random);\n        apiToken = Secret.fromString(Util.toHexString(random));\n    ","pos":1297}}]}}]}}
