{
    "java.functions": {
        "pos": 1,
        "text": "    boolean matchesPassword(String password, String username) {\n        String token = getApiTokenInsecure();\n        // String.equals isn't constant time, but this is\n        return MessageDigest.isEqual(password.getBytes(Charset.forName(\"US-ASCII\")),\n                token.getBytes(Charset.forName(\"US-ASCII\")));\n    }\n\n    private boolean hasPermissionToSeeToken(String temp) {\n        final Jenkins jenkins = Jenkins.getInstance();\n\n        // Administrators can do whatever they want\n        if (SHOW_TOKEN_TO_ADMINS && jenkins.hasPermission(Jenkins.ADMINISTER)) {\n            return true;\n        }\n\n\n        final User current = User.current();\n        if (current == null) { // Anonymous\n            return false;\n        }\n\n        // SYSTEM user is always eligible to see tokens\n        if (Jenkins.getAuthentication() == ACL.SYSTEM) {\n            return true;\n        }\n\n        //TODO: replace by IdStrategy in newer Jenkins versions\n        //return User.idStrategy().equals(user.getId(), current.getId());\n        return StringUtils.equals(user.getId(), current.getId());\n    }\n\n    public static void changeApiToken() throws IOException {\n        user.checkPermission(Jenkins.ADMINISTER);\n        _changeApiToken();\n        user.save();\n    }\n\n    private void _changeApiToken() {\n        byte[] random = new byte[16];   // 16x8=128bit worth of randomness, since we use md5 digest as the API token\n        RANDOM.nextBytes(random);\n        apiToken = Secret.fromString(Util.toHexString(random));\n    }\n\n    @Override\n    public UserProperty reconfigure(StaplerRequest req, JSONObject form) throws FormException {\n        return this;\n    }\n",
        "subs": [
            {
                "java.function_call": {
                    "pos": 1,
                    "text": "    boolean matchesPassword(String password, String username)",
                    "subs": [
                        {
                            "java.return_type": {
                                "pos": 5,
                                "text": "boolean"
                            }
                        },
                        {
                            "java.function_name": {
                                "pos": 12,
                                "text": " matchesPassword"
                            }
                        },
                        {
                            "java.parameters": {
                                "pos": 28,
                                "text": "(String password, String username)",
                                "subs": [
                                    {
                                        "java.single_param": {
                                            "pos": 29,
                                            "text": "String password"
                                        }
                                    },
                                    {
                                        "java.single_param": {
                                            "pos": 45,
                                            "text": " String username"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            },
            {
                "java.function_body": {
                    "pos": 62,
                    "text": " {\n        String token = getApiTokenInsecure();\n        // String.equals isn't constant time, but this is\n        return MessageDigest.isEqual(password.getBytes(Charset.forName(\"US-ASCII\")),\n                token.getBytes(Charset.forName(\"US-ASCII\")));\n    }",
                    "subs": [
                        {
                            "java.function_body_clean": {
                                "pos": 65,
                                "text": "        String token = getApiTokenInsecure();\n        // String.equals isn't constant time, but this is\n        return MessageDigest.isEqual(password.getBytes(Charset.forName(\"US-ASCII\")),\n                token.getBytes(Charset.forName(\"US-ASCII\")));\n    "
                            }
                        }
                    ]
                }
            },
            {
                "java.function_call": {
                    "pos": 321,
                    "text": "\n\n    private boolean hasPermissionToSeeToken(String temp)",
                    "subs": [
                        {
                            "java.access_sp": {
                                "pos": 327,
                                "text": "private "
                            }
                        },
                        {
                            "java.return_type": {
                                "pos": 335,
                                "text": "boolean"
                            }
                        },
                        {
                            "java.function_name": {
                                "pos": 342,
                                "text": " hasPermissionToSeeToken"
                            }
                        },
                        {
                            "java.parameters": {
                                "pos": 366,
                                "text": "(String temp)",
                                "subs": [
                                    {
                                        "java.single_param": {
                                            "pos": 367,
                                            "text": "String temp"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            },
            {
                "java.function_body": {
                    "pos": 379,
                    "text": " {\n        final Jenkins jenkins = Jenkins.getInstance();\n\n        // Administrators can do whatever they want\n        if (SHOW_TOKEN_TO_ADMINS && jenkins.hasPermission(Jenkins.ADMINISTER)) {\n            return true;\n        }",
                    "subs": [
                        {
                            "java.function_body_clean": {
                                "pos": 382,
                                "text": "        final Jenkins jenkins = Jenkins.getInstance();\n\n        // Administrators can do whatever they want\n        if (SHOW_TOKEN_TO_ADMINS && jenkins.hasPermission(Jenkins.ADMINISTER)) {\n            return true;\n        "
                            }
                        }
                    ]
                }
            },
            {
                "java.function_call": {
                    "pos": 1231,
                    "text": "\n        user.save();\n    }\n\n    private void _changeApiToken()",
                    "subs": [
                        {
                            "java.return_type": {
                                "pos": 1240,
                                "text": "user.save();"
                            }
                        },
                        {
                            "java.function_name": {
                                "pos": 1252,
                                "text": "\n    }\n\n    private void _changeApiToken"
                            }
                        },
                        {
                            "java.parameters": {
                                "pos": 1292,
                                "text": "()",
                                "subs": [
                                    {
                                        "java.single_param": {
                                            "pos": 1293,
                                            "text": ""
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            },
            {
                "java.function_body": {
                    "pos": 1294,
                    "text": " {\n        byte[] random = new byte[16];   // 16x8=128bit worth of randomness, since we use md5 digest as the API token\n        RANDOM.nextBytes(random);\n        apiToken = Secret.fromString(Util.toHexString(random));\n    }",
                    "subs": [
                        {
                            "java.function_body_clean": {
                                "pos": 1297,
                                "text": "        byte[] random = new byte[16];   // 16x8=128bit worth of randomness, since we use md5 digest as the API token\n        RANDOM.nextBytes(random);\n        apiToken = Secret.fromString(Util.toHexString(random));\n    "
                            }
                        }
                    ]
                }
            }
        ]
    }
}
