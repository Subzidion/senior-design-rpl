{"js.line_comments":{"subs":[{"js.line_comment":{"subs":[{"js.line_comment_context":{"pos":1,"text":"\/*:"}},{"js.line_comment_body":{"subs":[{"js.line_comment_text":{"pos":6,"text":"github.com\/gre\/bezier-easing\r"}}],"pos":4,"text":"\/\/github.com\/gre\/bezier-easing\r"}}],"pos":1,"text":"\/*:\/\/github.com\/gre\/bezier-easing\r"}},{"js.line_comment":{"subs":[{"js.line_comment_context":{"pos":159,"text":""}},{"js.line_comment_body":{"subs":[{"js.line_comment_text":{"pos":161,"text":" These values are established by empiricism with tests (tradeoff: performance VS precision)\r"}}],"pos":159,"text":"\/\/ These values are established by empiricism with tests (tradeoff: performance VS precision)\r"}}],"pos":159,"text":"\/\/ These values are established by empiricism with tests (tradeoff: performance VS precision)\r"}},{"js.line_comment":{"subs":[{"js.line_comment_context":{"pos":712,"text":""}},{"js.line_comment_body":{"subs":[{"js.line_comment_text":{"pos":714,"text":" Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\r"}}],"pos":712,"text":"\/\/ Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\r"}}],"pos":712,"text":"\/\/ Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\r"}},{"js.line_comment":{"subs":[{"js.line_comment_context":{"pos":883,"text":""}},{"js.line_comment_body":{"subs":[{"js.line_comment_text":{"pos":885,"text":" Returns dx\/dt given t, x1, and x2, or dy\/dt given t, y1, and y2.\r"}}],"pos":883,"text":"\/\/ Returns dx\/dt given t, x1, and x2, or dy\/dt given t, y1, and y2.\r"}}],"pos":883,"text":"\/\/ Returns dx\/dt given t, x1, and x2, or dy\/dt given t, y1, and y2.\r"}},{"js.line_comment":{"subs":[{"js.line_comment_context":{"pos":1645,"text":"     return aGuessT;    "}},{"js.line_comment_body":{"subs":[{"js.line_comment_text":{"pos":1671,"text":" This is an inline comment that we need to catch.\r"}}],"pos":1669,"text":"\/\/ This is an inline comment that we need to catch.\r"}}],"pos":1645,"text":"     return aGuessT;    \/\/ This is an inline comment that we need to catch.\r"}},{"js.line_comment":{"subs":[{"js.line_comment_context":{"pos":2037,"text":"  "}},{"js.line_comment_body":{"subs":[{"js.line_comment_text":{"pos":2041,"text":" Precompute samples table\r"}}],"pos":2039,"text":"\/\/ Precompute samples table\r"}}],"pos":2037,"text":"  \/\/ Precompute samples table\r"}},{"js.line_comment":{"subs":[{"js.line_comment_context":{"pos":2347,"text":""}},{"js.line_comment_body":{"subs":[{"js.line_comment_text":{"pos":2349,"text":"This is an inline comment.\r"}}],"pos":2347,"text":"\/\/This is an inline comment.\r"}}],"pos":2347,"text":"\/\/This is an inline comment.\r"}},{"js.line_comment":{"subs":[{"js.line_comment_context":{"pos":2435,"text":"    var currentSample = 1; "}},{"js.line_comment_body":{"subs":[{"js.line_comment_text":{"pos":2464,"text":"This is a tests inline\r"}}],"pos":2462,"text":"\/\/This is a tests inline\r"}}],"pos":2435,"text":"    var currentSample = 1; \/\/This is a tests inline\r"}},{"js.line_comment":{"subs":[{"js.line_comment_context":{"pos":2704,"text":"    "}},{"js.line_comment_body":{"subs":[{"js.line_comment_text":{"pos":2710,"text":" Interpolate to provide an initial guess for t\r"}}],"pos":2708,"text":"\/\/ Interpolate to provide an initial guess for t\r"}}],"pos":2704,"text":"    \/\/ Interpolate to provide an initial guess for t\r"}},{"js.line_comment":{"subs":[{"js.line_comment_context":{"pos":3363,"text":"      return x; "}},{"js.line_comment_body":{"subs":[{"js.line_comment_text":{"pos":3381,"text":" linear\r"}}],"pos":3379,"text":"\/\/ linear\r"}}],"pos":3363,"text":"      return x; \/\/ linear\r"}},{"js.line_comment":{"subs":[{"js.line_comment_context":{"pos":3397,"text":"    "}},{"js.line_comment_body":{"subs":[{"js.line_comment_text":{"pos":3403,"text":" Because JavaScript number are imprecise, we should guarantee the extremes are right.\r"}}],"pos":3401,"text":"\/\/ Because JavaScript number are imprecise, we should guarantee the extremes are right.\r"}}],"pos":3397,"text":"    \/\/ Because JavaScript number are imprecise, we should guarantee the extremes are right.\r"}}],"pos":1,"text":"\/*:\/\/github.com\/gre\/bezier-easing\r\n * BezierEasing - use bezier curve for transition easing function\r\n * by Gatan Renaudeau 2014 - 2015 - MIT License\r\n *\/\r\n\r\n\/\/ These values are established by empiricism with tests (tradeoff: performance VS precision)\r\nvar NEWTON_ITERATIONS = 4;\r\nvar NEWTON_MIN_SLOPE = 0.001;\r\nvar SUBDIVISION_PRECISION = 0.0000001;\r\nvar SUBDIVISION_MAX_ITERATIONS = 10;\r\n\r\nvar kSplineTableSize = 11;\r\nvar kSampleStepSize = 1.0 \/ (kSplineTableSize - 1.0);\r\n\r\nvar float32ArraySupported = typeof Float32Array === 'function';\r\n\r\nfunction A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\r\nfunction B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\r\nfunction C (aA1)      { return 3.0 * aA1; }\r\n\r\n\/\/ Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\r\nfunction calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT; }\r\n\r\n\/\/ Returns dx\/dt given t, x1, and x2, or dy\/dt given t, y1, and y2.\r\nfunction getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1); }\r\n\r\nfunction binarySubdivide (aX, aA, aB, mX1, mX2) {\r\n  var currentX, currentT, i = 0;\r\n  do {\r\n    currentT = aA + (aB - aA) \/ 2.0;\r\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\r\n    if (currentX > 0.0) {\r\n      aB = currentT;\r\n    } else {\r\n      aA = currentT;\r\n    }\r\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\r\n  return currentT;\r\n}\r\n\r\nfunction newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {\r\n for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\r\n   var currentSlope = getSlope(aGuessT, mX1, mX2);\r\n   if (currentSlope === 0.0) {\r\n     return aGuessT;    \/\/ This is an inline comment that we need to catch.\r\n   }\r\n   var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\r\n   aGuessT -= currentX \/ currentSlope;\r\n }\r\n return aGuessT;\r\n}\r\n\r\nmodule.exports = function bezier (mX1, mY1, mX2, mY2) {\r\n  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\r\n    throw new Error('bezier x values must be in [0, 1] range');\r\n  }\r\n\r\n  \/\/ Precompute samples table\r\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\r\n  if (mX1 !== mY1 || mX2 !== mY2) {\r\n    for (var i = 0; i < kSplineTableSize; ++i) {\r\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\r\n    }\r\n  }\r\n\/\/This is an inline comment.\r\n  function getTForX (aX) {\r\n    var intervalStart = 0.0;\r\n    var currentSample = 1; \/\/This is a tests inline\r\n    var lastSample = kSplineTableSize - 1;\r\n\r\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\r\n      intervalStart += kSampleStepSize;\r\n    }\r\n    --currentSample;\r\n\r\n    \/\/ Interpolate to provide an initial guess for t\r\n    var dist = (aX - sampleValues[currentSample]) \/ (sampleValues[currentSample + 1] - sampleValues[currentSample]);\r\n    var guessForT = intervalStart + dist * kSampleStepSize;\r\n\r\n    var initialSlope = getSlope(guessForT, mX1, mX2);\r\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\r\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\r\n    } else if (initialSlope === 0.0) {\r\n      return guessForT;\r\n    } else {\r\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\r\n    }\r\n  }\r\n\r\n  return function BezierEasing (x) {\r\n    if (mX1 === mY1 && mX2 === mY2) {\r\n      return x; \/\/ linear\r\n    }\r\n    \/\/ Because JavaScript number are imprecise, we should guarantee the extremes are right.\r\n    if (x === 0) {\r\n      return 0;\r\n    }\r\n    if (x === 1) {\r\n      return 1;\r\n    }\r\n    return calcBezier(getTForX(x), mY1, mY2);\r\n  };\r\n};\r\n\r\n"}}
