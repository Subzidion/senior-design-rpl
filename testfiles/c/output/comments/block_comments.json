{"c.block_comments":{"subs":[{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":"*\r\n * color.c -- functions related to custom color\r\n *    ______      ___\r\n *   \/ ____\/___  \/   | _____________  __________\r\n *  \/ \/ __\/ __ \\\/ \/| |\/ ___\/ ___\/ _ \\\/ ___\/ ___\/\r\n * \/ \/_\/ \/ \/_\/ \/ ___ \/ \/__\/ \/__\/  __(__  |__  )\r\n * \\____\/\\____\/_\/  |_\\___\/\\___\/\\___\/____\/____\/\r\n *\r\n * The MIT License (MIT)\r\n * Copyright (c) 2009-2016 Gerardo Orellana <hello @ goaccess.io>\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n ","pos":3}}],"text":"\/**\r\n * color.c -- functions related to custom color\r\n *    ______      ___\r\n *   \/ ____\/___  \/   | _____________  __________\r\n *  \/ \/ __\/ __ \\\/ \/| |\/ ___\/ ___\/ _ \\\/ ___\/ ___\/\r\n * \/ \/_\/ \/ \/_\/ \/ ___ \/ \/__\/ \/__\/  __(__  |__  )\r\n * \\____\/\\____\/_\/  |_\\___\/\\___\/\\___\/____\/____\/\r\n *\r\n * The MIT License (MIT)\r\n * Copyright (c) 2009-2016 Gerardo Orellana <hello @ goaccess.io>\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\/","pos":1}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" *INDENT-OFF* ","pos":1809}}],"text":"\/* *INDENT-OFF* *\/","pos":1807}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" *INDENT-ON* ","pos":11900}}],"text":"\/* *INDENT-ON* *\/","pos":11898}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Allocate memory for color elements ","pos":11921}}],"text":"\/* Allocate memory for color elements *\/","pos":11919}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Allocate memory for a color element properties ","pos":12102}}],"text":"\/* Allocate memory for a color element properties *\/","pos":12100}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Must be between 2 and COLOR_PAIRS-1.\r\n   * Starts at 2 since COLOR_NORMAL has already been set ","pos":12261}}],"text":"\/* Must be between 2 and COLOR_PAIRS-1.\r\n   * Starts at 2 since COLOR_NORMAL has already been set *\/","pos":12259}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Free malloc'd memory for color elements ","pos":12404}}],"text":"\/* Free malloc'd memory for color elements *\/","pos":12402}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Set a default color - COLOR_NORMAL, this will be used if\r\n * no colors are supported by the terminal ","pos":12643}}],"text":"\/* Set a default color - COLOR_NORMAL, this will be used if\r\n * no colors are supported by the terminal *\/","pos":12641}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Get color properties for COLOR_OVERALL_LBLS ","pos":13110}}],"text":"\/* Get color properties for COLOR_OVERALL_LBLS *\/","pos":13108}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Get color properties for COLOR_OVERALL_VALS ","pos":13249}}],"text":"\/* Get color properties for COLOR_OVERALL_VALS *\/","pos":13247}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Get color properties for COLOR_OVERALL_PATH ","pos":13388}}],"text":"\/* Get color properties for COLOR_OVERALL_PATH *\/","pos":13386}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Get color properties for COLOR_PANEL_HEADER ","pos":13527}}],"text":"\/* Get color properties for COLOR_PANEL_HEADER *\/","pos":13525}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Get color properties for COLOR_PANEL_DESC ","pos":13666}}],"text":"\/* Get color properties for COLOR_PANEL_DESC *\/","pos":13664}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Get color properties for COLOR_PANEL_ACTIVE","pos":13799}}],"text":"\/* Get color properties for COLOR_PANEL_ACTIVE*\/","pos":13797}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Get color properties for COLOR_SELECTED ","pos":13937}}],"text":"\/* Get color properties for COLOR_SELECTED *\/","pos":13935}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Get color properties for COLOR_PROGRESS ","pos":14064}}],"text":"\/* Get color properties for COLOR_PROGRESS *\/","pos":14062}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Get color properties for COLOR_DEFAULT ","pos":14191}}],"text":"\/* Get color properties for COLOR_DEFAULT *\/","pos":14189}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Get color properties for COLOR_ERROR ","pos":14315}}],"text":"\/* Get color properties for COLOR_ERROR *\/","pos":14313}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Get the enumerated color given its equivalent color string.\r\n *\r\n * On error, -1 is returned.\r\n * On success, the enumerated color is returned. ","pos":14433}}],"text":"\/* Get the enumerated color given its equivalent color string.\r\n *\r\n * On error, -1 is returned.\r\n * On success, the enumerated color is returned. *\/","pos":14431}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Extract color number from the given config string.\r\n *\r\n * On error, -2 is returned. If color is greater than max colors, it aborts.\r\n * On success, the color number is returned. ","pos":14708}}],"text":"\/* Extract color number from the given config string.\r\n *\r\n * On error, -2 is returned. If color is greater than max colors, it aborts.\r\n * On success, the color number is returned. *\/","pos":14706}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" ensure used color is supported by the terminal ","pos":15161}}],"text":"\/* ensure used color is supported by the terminal *\/","pos":15159}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Assign the background and foreground color number from the given\r\n * config string to GColorPair.\r\n *\r\n * On error, 1 is returned.\r\n * On success, 0 is returned. ","pos":15339}}],"text":"\/* Assign the background and foreground color number from the given\r\n * config string to GColorPair.\r\n *\r\n * On error, 1 is returned.\r\n * On success, 0 is returned. *\/","pos":15337}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Assign color attributes from the given config string to GColors. ","pos":15899}}],"text":"\/* Assign color attributes from the given config string to GColors. *\/","pos":15897}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Parse color attributes from the given config string.\r\n *\r\n * On error, 1 is returned.\r\n * On success, 0 is returned. ","pos":16424}}],"text":"\/* Parse color attributes from the given config string.\r\n *\r\n * On error, 1 is returned.\r\n * On success, 0 is returned. *\/","pos":16422}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Parse color module from the given config string.\r\n *\r\n * On error, 1 is returned.\r\n * On success, 0 is returned. ","pos":17094}}],"text":"\/* Parse color module from the given config string.\r\n *\r\n * On error, 1 is returned.\r\n * On success, 0 is returned. *\/","pos":17092}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Find a color by item and module attributes on the list of already\r\n * parsed colors.\r\n *\r\n * If color exists, 1 is returned.\r\n * If color does not exist, 1 is returned. ","pos":17639}}],"text":"\/* Find a color by item and module attributes on the list of already\r\n * parsed colors.\r\n *\r\n * If color exists, 1 is returned.\r\n * If color does not exist, 1 is returned. *\/","pos":17637}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Find a color by foreground and background attributes on the list of\r\n * already parsed colors.\r\n *\r\n * If color exists, 1 is returned.\r\n * If color does not exist, 1 is returned. ","pos":18077}}],"text":"\/* Find a color by foreground and background attributes on the list of\r\n * already parsed colors.\r\n *\r\n * If color exists, 1 is returned.\r\n * If color does not exist, 1 is returned. *\/","pos":18075}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Compare a color item (GColorItem) that has no module with the given needle\r\n * item.\r\n *\r\n * If the items match and with no module, 1 is returned.\r\n * If condition is not satisfied, 0 is returned. ","pos":18518}}],"text":"\/* Compare a color item (GColorItem) that has no module with the given needle\r\n * item.\r\n *\r\n * If the items match and with no module, 1 is returned.\r\n * If condition is not satisfied, 0 is returned. *\/","pos":18516}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Compare a color item (GColorItem) and module with the given needle item.\r\n *\r\n * If the items match and with no module, 1 is returned.\r\n * If condition is not satisfied, 0 is returned. ","pos":18930}}],"text":"\/* Compare a color item (GColorItem) and module with the given needle item.\r\n *\r\n * If the items match and with no module, 1 is returned.\r\n * If condition is not satisfied, 0 is returned. *\/","pos":18928}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Get color item properties given an item (enumerated).\r\n *\r\n * On error, it aborts.\r\n * On success, the color item properties are returned, or NULL if no match\r\n * found. ","pos":19326}}],"text":"\/* Get color item properties given an item (enumerated).\r\n *\r\n * On error, it aborts.\r\n * On success, the color item properties are returned, or NULL if no match\r\n * found. *\/","pos":19324}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" should not get here ","pos":19839}}],"text":"\/* should not get here *\/","pos":19837}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Get color item properties given an item (enumerated) and its module.\r\n *\r\n * On error, it aborts.\r\n * On success, the color item properties are returned, or NULL if no match\r\n * found. ","pos":19920}}],"text":"\/* Get color item properties given an item (enumerated) and its module.\r\n *\r\n * On error, it aborts.\r\n * On success, the color item properties are returned, or NULL if no match\r\n * found. *\/","pos":19918}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" find color for specific item\/module pair ","pos":20322}}],"text":"\/* find color for specific item\/module pair *\/","pos":20320}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" attempt to find color by item (fallback) ","pos":20481}}],"text":"\/* attempt to find color by item (fallback) *\/","pos":20479}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Parse a color definition line from the config file.\r\n *\r\n * On error, it aborts.\r\n * On success, the color properties are assigned ","pos":20617}}],"text":"\/* Parse a color definition line from the config file.\r\n *\r\n * On error, it aborts.\r\n * On success, the color properties are assigned *\/","pos":20615}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" key ","pos":20888}}],"text":"\/* key *\/","pos":20886}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" value ","pos":21142}}],"text":"\/* value *\/","pos":21140}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" get background\/foreground color ","pos":21321}}],"text":"\/* get background\/foreground color *\/","pos":21319}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Parse a color definition line from the config file and store it on a signle\r\n * linked-list.\r\n *\r\n * On error, it aborts.\r\n * On success, the color properties are stored ","pos":21703}}],"text":"\/* Parse a color definition line from the config file and store it on a signle\r\n * linked-list.\r\n *\r\n * On error, it aborts.\r\n * On success, the color properties are stored *\/","pos":21701}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Iterate over all color definitions in the config file.\r\n *\r\n * On error, it aborts.\r\n * On success, the color properties are parsed and stored ","pos":22773}}],"text":"\/* Iterate over all color definitions in the config file.\r\n *\r\n * On error, it aborts.\r\n * On success, the color properties are parsed and stored *\/","pos":22771}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" did not find a valid format ","pos":23081}}],"text":"\/* did not find a valid format *\/","pos":23079}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Use default color definitions if necessary. ","pos":23234}}],"text":"\/* Use default color definitions if necessary. *\/","pos":23232}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" no colors ","pos":23330}}],"text":"\/* no colors *\/","pos":23328}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" 256 colors, and no color scheme set or set to monokai ","pos":23423}}],"text":"\/* 256 colors, and no color scheme set or set to monokai *\/","pos":23421}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" otherwise use 16 colors scheme ","pos":23635}}],"text":"\/* otherwise use 16 colors scheme *\/","pos":23633}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" 8 colors ","pos":23896}}],"text":"\/* 8 colors *\/","pos":23894}},{"c.block_comment":{"subs":[{"c.block_comment_body":{"text":" Entry point to parse color definitions or use default colors ","pos":24141}}],"text":"\/* Entry point to parse color definitions or use default colors *\/","pos":24139}}],"text":"\/**\r\n * color.c -- functions related to custom color\r\n *    ______      ___\r\n *   \/ ____\/___  \/   | _____________  __________\r\n *  \/ \/ __\/ __ \\\/ \/| |\/ ___\/ ___\/ _ \\\/ ___\/ ___\/\r\n * \/ \/_\/ \/ \/_\/ \/ ___ \/ \/__\/ \/__\/  __(__  |__  )\r\n * \\____\/\\____\/_\/  |_\\___\/\\___\/\\___\/____\/____\/\r\n *\r\n * The MIT License (MIT)\r\n * Copyright (c) 2009-2016 Gerardo Orellana <hello @ goaccess.io>\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\/\r\n\r\n#if HAVE_CONFIG_H\r\n#include <config.h>\r\n#endif\r\n\r\n#include <errno.h>\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#include <strings.h>\r\n\r\n#include \"color.h\"\r\n\r\n#include \"error.h\"\r\n#include \"gslist.h\"\r\n#include \"util.h\"\r\n#include \"xmalloc.h\"\r\n\r\nstatic GSLList *color_list = NULL;\r\nstatic GSLList *pair_list = NULL;\r\n\r\n\/* *INDENT-OFF* *\/\r\nstatic GEnum CSTM_COLORS[] = {\r\n  {\"COLOR_MTRC_HITS\"     , COLOR_MTRC_HITS}     ,\r\n  {\"COLOR_MTRC_VISITORS\" , COLOR_MTRC_VISITORS} ,\r\n  {\"COLOR_MTRC_PERC\"     , COLOR_MTRC_PERC}     ,\r\n  {\"COLOR_MTRC_BW\"       , COLOR_MTRC_BW}       ,\r\n  {\"COLOR_MTRC_AVGTS\"    , COLOR_MTRC_AVGTS}    ,\r\n  {\"COLOR_MTRC_CUMTS\"    , COLOR_MTRC_CUMTS}    ,\r\n  {\"COLOR_MTRC_MAXTS\"    , COLOR_MTRC_MAXTS}    ,\r\n  {\"COLOR_MTRC_PROT\"     , COLOR_MTRC_PROT}     ,\r\n  {\"COLOR_MTRC_MTHD\"     , COLOR_MTRC_MTHD}     ,\r\n  {\"COLOR_MTRC_DATA\"     , COLOR_MTRC_DATA}     ,\r\n  {\"COLOR_MTRC_PERC_MAX\" , COLOR_MTRC_PERC_MAX} ,\r\n  {\"COLOR_PANEL_COLS\"    , COLOR_PANEL_COLS}    ,\r\n  {\"COLOR_BARS\"          , COLOR_BARS}          ,\r\n  {\"COLOR_ERROR\"         , COLOR_ERROR}         ,\r\n  {\"COLOR_SELECTED\"      , COLOR_SELECTED}      ,\r\n  {\"COLOR_PANEL_ACTIVE\"  , COLOR_PANEL_ACTIVE}  ,\r\n  {\"COLOR_PANEL_HEADER\"  , COLOR_PANEL_HEADER}  ,\r\n  {\"COLOR_PANEL_DESC\"    , COLOR_PANEL_DESC}  ,\r\n  {\"COLOR_OVERALL_LBLS\"  , COLOR_OVERALL_LBLS}  ,\r\n  {\"COLOR_OVERALL_VALS\"  , COLOR_OVERALL_VALS}  ,\r\n  {\"COLOR_OVERALL_PATH\"  , COLOR_OVERALL_PATH}  ,\r\n  {\"COLOR_ACTIVE_LABEL\"  , COLOR_ACTIVE_LABEL}  ,\r\n  {\"COLOR_BG\"            , COLOR_BG}            ,\r\n  {\"COLOR_DEFAULT\"       , COLOR_DEFAULT}       ,\r\n  {\"COLOR_PROGRESS\"      , COLOR_PROGRESS}      ,\r\n};\r\n\r\nstatic const char *colors256_mono[] = {\r\n  \"COLOR_MTRC_HITS     color7:color-1\",\r\n  \"COLOR_MTRC_VISITORS color8:color-1\",\r\n  \"COLOR_MTRC_DATA     color7:color-1\",\r\n  \"COLOR_MTRC_BW       color8:color-1\",\r\n  \"COLOR_MTRC_AVGTS    color8:color-1\",\r\n  \"COLOR_MTRC_CUMTS    color8:color-1\",\r\n  \"COLOR_MTRC_MAXTS    color8:color-1\",\r\n  \"COLOR_MTRC_PROT     color8:color-1\",\r\n  \"COLOR_MTRC_MTHD     color7:color-1\",\r\n  \"COLOR_MTRC_PERC     color0:color-1 bold\",\r\n  \"COLOR_MTRC_PERC     color1:color-1 bold VISITORS\",\r\n  \"COLOR_MTRC_PERC     color1:color-1 bold OS\",\r\n  \"COLOR_MTRC_PERC     color1:color-1 bold BROWSERS\",\r\n  \"COLOR_MTRC_PERC     color1:color-1 bold VISIT_TIMES\",\r\n  \"COLOR_MTRC_PERC_MAX color0:color-1 bold\",\r\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold VISITORS\",\r\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold OS\",\r\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold BROWSERS\",\r\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold VISIT_TIMES\",\r\n  \"COLOR_PANEL_COLS    color7:color-1\",\r\n  \"COLOR_BARS          color7:color-1\",\r\n  \"COLOR_ERROR         color7:color1\",\r\n  \"COLOR_SELECTED      color7:color8\",\r\n  \"COLOR_PANEL_ACTIVE  color0:color3\",\r\n  \"COLOR_PANEL_HEADER  color0:color7\",\r\n  \"COLOR_PANEL_DESC    color7:color-1\",\r\n  \"COLOR_OVERALL_LBLS  color7:color-1 bold\",\r\n  \"COLOR_OVERALL_VALS  color6:color-1 bold\",\r\n  \"COLOR_OVERALL_PATH  color3:color-1\",\r\n  \"COLOR_ACTIVE_LABEL  color4:color7\",\r\n  \"COLOR_BG            color7:color-1\",\r\n  \"COLOR_DEFAULT       color7:color-1\",\r\n  \"COLOR_PROGRESS      color0:color6\",\r\n};\r\n\r\nstatic const char *colors256_green[] = {\r\n  \"COLOR_MTRC_HITS     color7:color-1\",\r\n  \"COLOR_MTRC_VISITORS color8:color-1\",\r\n  \"COLOR_MTRC_DATA     color7:color-1\",\r\n  \"COLOR_MTRC_BW       color8:color-1\",\r\n  \"COLOR_MTRC_AVGTS    color8:color-1\",\r\n  \"COLOR_MTRC_CUMTS    color8:color-1\",\r\n  \"COLOR_MTRC_MAXTS    color8:color-1\",\r\n  \"COLOR_MTRC_PROT     color8:color-1\",\r\n  \"COLOR_MTRC_MTHD     color7:color-1\",\r\n  \"COLOR_MTRC_PERC     color0:color-1 bold\",\r\n  \"COLOR_MTRC_PERC     color1:color-1 bold VISITORS\",\r\n  \"COLOR_MTRC_PERC     color1:color-1 bold OS\",\r\n  \"COLOR_MTRC_PERC     color1:color-1 bold BROWSERS\",\r\n  \"COLOR_MTRC_PERC     color1:color-1 bold VISIT_TIMES\",\r\n  \"COLOR_MTRC_PERC_MAX color0:color-1 bold\",\r\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold VISITORS\",\r\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold OS\",\r\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold BROWSERS\",\r\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold VISIT_TIMES\",\r\n  \"COLOR_PANEL_COLS    color7:color-1\",\r\n  \"COLOR_BARS          color7:color-1\",\r\n  \"COLOR_ERROR         color7:color1\",\r\n  \"COLOR_SELECTED      color7:color8\",\r\n  \"COLOR_PANEL_ACTIVE  color0:color3\",\r\n  \"COLOR_PANEL_HEADER  color0:color35\",\r\n  \"COLOR_PANEL_DESC    color7:color-1\",\r\n  \"COLOR_OVERALL_LBLS  color7:color-1 bold\",\r\n  \"COLOR_OVERALL_VALS  color6:color-1 bold\",\r\n  \"COLOR_OVERALL_PATH  color3:color-1\",\r\n  \"COLOR_ACTIVE_LABEL  color7:color35\",\r\n  \"COLOR_BG            color7:color-1\",\r\n  \"COLOR_DEFAULT       color7:color-1\",\r\n  \"COLOR_PROGRESS      color0:color6\",\r\n};\r\n\r\nstatic const char *colors256_monokai[] = {\r\n  \"COLOR_MTRC_HITS     color197:color-1\",\r\n  \"COLOR_MTRC_VISITORS color148:color-1\",\r\n  \"COLOR_MTRC_DATA     color7:color-1\",\r\n  \"COLOR_MTRC_BW       color81:color-1\",\r\n  \"COLOR_MTRC_AVGTS    color247:color-1\",\r\n  \"COLOR_MTRC_CUMTS    color95:color-1\",\r\n  \"COLOR_MTRC_MAXTS    color186:color-1\",\r\n  \"COLOR_MTRC_PROT     color141:color-1\",\r\n  \"COLOR_MTRC_MTHD     color81:color-1\",\r\n  \"COLOR_MTRC_PERC     color186:color-1\",\r\n  \"COLOR_MTRC_PERC     color186:color-1 VISITORS\",\r\n  \"COLOR_MTRC_PERC     color186:color-1 OS\",\r\n  \"COLOR_MTRC_PERC     color186:color-1 BROWSERS\",\r\n  \"COLOR_MTRC_PERC     color186:color-1 VISIT_TIMES\",\r\n  \"COLOR_MTRC_PERC_MAX color208:color-1\",\r\n  \"COLOR_MTRC_PERC_MAX color208:color-1 VISITORS\",\r\n  \"COLOR_MTRC_PERC_MAX color208:color-1 OS\",\r\n  \"COLOR_MTRC_PERC_MAX color208:color-1 BROWSERS\",\r\n  \"COLOR_MTRC_PERC_MAX color208:color-1 VISIT_TIMES\",\r\n  \"COLOR_PANEL_COLS    color242:color-1\",\r\n  \"COLOR_BARS          color186:color-1\",\r\n  \"COLOR_ERROR         color231:color197\",\r\n  \"COLOR_SELECTED      color0:color215\",\r\n  \"COLOR_PANEL_ACTIVE  color7:color240\",\r\n  \"COLOR_PANEL_HEADER  color7:color237\",\r\n  \"COLOR_PANEL_DESC    color242:color-1\",\r\n  \"COLOR_OVERALL_LBLS  color251:color-1\",\r\n  \"COLOR_OVERALL_VALS  color148:color-1\",\r\n  \"COLOR_OVERALL_PATH  color186:color-1\",\r\n  \"COLOR_ACTIVE_LABEL  color7:color237\",\r\n  \"COLOR_BG            color7:color-1\",\r\n  \"COLOR_DEFAULT       color7:color-1\",\r\n  \"COLOR_PROGRESS      color7:color141\",\r\n};\r\n\r\nstatic const char *colors8_mono[] = {\r\n  \"COLOR_MTRC_HITS     color7:color-1\",\r\n  \"COLOR_MTRC_VISITORS color0:color-1 bold\",\r\n  \"COLOR_MTRC_DATA     color7:color-1\",\r\n  \"COLOR_MTRC_BW       color0:color-1 bold\",\r\n  \"COLOR_MTRC_AVGTS    color0:color-1 bold\",\r\n  \"COLOR_MTRC_CUMTS    color0:color-1 bold\",\r\n  \"COLOR_MTRC_MAXTS    color0:color-1 bold\",\r\n  \"COLOR_MTRC_PROT     color0:color-1 bold\",\r\n  \"COLOR_MTRC_MTHD     color7:color-1 \",\r\n  \"COLOR_MTRC_PERC     color0:color-1 bold\",\r\n  \"COLOR_MTRC_PERC     color1:color-1 bold VISITORS\",\r\n  \"COLOR_MTRC_PERC     color1:color-1 bold OS\",\r\n  \"COLOR_MTRC_PERC     color1:color-1 bold BROWSERS\",\r\n  \"COLOR_MTRC_PERC     color1:color-1 bold VISIT_TIMES\",\r\n  \"COLOR_MTRC_PERC_MAX color0:color-1 bold\",\r\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold VISITORS\",\r\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold OS\",\r\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold BROWSERS\",\r\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold VISIT_TIMES\",\r\n  \"COLOR_PANEL_COLS    color7:color-1\",\r\n  \"COLOR_BARS          color7:color-1\",\r\n  \"COLOR_ERROR         color7:color1\",\r\n  \"COLOR_SELECTED      color0:color7\",\r\n  \"COLOR_PANEL_ACTIVE  color0:color3\",\r\n  \"COLOR_PANEL_HEADER  color0:color7\",\r\n  \"COLOR_PANEL_DESC    color7:color-1\",\r\n  \"COLOR_OVERALL_LBLS  color7:color-1 bold\",\r\n  \"COLOR_OVERALL_VALS  color6:color-1\",\r\n  \"COLOR_OVERALL_PATH  color3:color-1\",\r\n  \"COLOR_ACTIVE_LABEL  color4:color7\",\r\n  \"COLOR_BG            color7:color-1\",\r\n  \"COLOR_DEFAULT       color7:color-1\",\r\n  \"COLOR_PROGRESS      color0:color6\",\r\n};\r\n\r\nstatic const char *colors8_green[] = {\r\n  \"COLOR_MTRC_HITS     color7:color-1\",\r\n  \"COLOR_MTRC_VISITORS color0:color-1 bold\",\r\n  \"COLOR_MTRC_DATA     color7:color-1\",\r\n  \"COLOR_MTRC_BW       color0:color-1 bold\",\r\n  \"COLOR_MTRC_AVGTS    color0:color-1 bold\",\r\n  \"COLOR_MTRC_CUMTS    color0:color-1 bold\",\r\n  \"COLOR_MTRC_MAXTS    color0:color-1 bold\",\r\n  \"COLOR_MTRC_PROT     color0:color-1 bold\",\r\n  \"COLOR_MTRC_MTHD     color7:color-1 \",\r\n  \"COLOR_MTRC_PERC     color0:color-1 bold\",\r\n  \"COLOR_MTRC_PERC     color1:color-1 bold VISITORS\",\r\n  \"COLOR_MTRC_PERC     color1:color-1 bold OS\",\r\n  \"COLOR_MTRC_PERC     color1:color-1 bold BROWSERS\",\r\n  \"COLOR_MTRC_PERC     color1:color-1 bold VISIT_TIMES\",\r\n  \"COLOR_MTRC_PERC_MAX color0:color-1 bold\",\r\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold VISITORS\",\r\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold OS\",\r\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold BROWSERS\",\r\n  \"COLOR_MTRC_PERC_MAX color3:color-1 bold VISIT_TIMES\",\r\n  \"COLOR_PANEL_COLS    color7:color-1\",\r\n  \"COLOR_BARS          color2:color-1\",\r\n  \"COLOR_ERROR         color7:color1\",\r\n  \"COLOR_SELECTED      color0:color7\",\r\n  \"COLOR_PANEL_ACTIVE  color0:color3\",\r\n  \"COLOR_PANEL_HEADER  color0:color2\",\r\n  \"COLOR_PANEL_DESC    color7:color-1\",\r\n  \"COLOR_OVERALL_LBLS  color7:color-1 bold\",\r\n  \"COLOR_OVERALL_VALS  color6:color-1\",\r\n  \"COLOR_OVERALL_PATH  color3:color-1\",\r\n  \"COLOR_ACTIVE_LABEL  color0:color2\",\r\n  \"COLOR_BG            color7:color-1\",\r\n  \"COLOR_DEFAULT       color7:color-1\",\r\n  \"COLOR_PROGRESS      color0:color6\",\r\n};\r\n\r\nstatic const char *nocolors[] = {\r\n  \"COLOR_MTRC_HITS     color0:color-1\",\r\n  \"COLOR_MTRC_VISITORS color0:color-1\",\r\n  \"COLOR_MTRC_DATA     color0:color-1\",\r\n  \"COLOR_MTRC_BW       color0:color-1\",\r\n  \"COLOR_MTRC_AVGTS    color0:color-1\",\r\n  \"COLOR_MTRC_CUMTS    color0:color-1\",\r\n  \"COLOR_MTRC_MAXTS    color0:color-1\",\r\n  \"COLOR_MTRC_PROT     color0:color-1\",\r\n  \"COLOR_MTRC_MTHD     color0:color-1\",\r\n  \"COLOR_MTRC_PERC     color0:color-1\",\r\n  \"COLOR_MTRC_PERC_MAX color0:color-1\",\r\n  \"COLOR_PANEL_COLS    color0:color-1\",\r\n  \"COLOR_BARS          color0:color-1\",\r\n  \"COLOR_ERROR         color0:color-1\",\r\n  \"COLOR_SELECTED      color0:color-1 reverse\",\r\n  \"COLOR_PANEL_ACTIVE  color0:color-1 reverse\",\r\n  \"COLOR_PANEL_HEADER  color0:color-1 reverse\",\r\n  \"COLOR_PANEL_DESC    color0:color-1\",\r\n  \"COLOR_OVERALL_LBLS  color0:color-1\",\r\n  \"COLOR_OVERALL_VALS  color0:color-1\",\r\n  \"COLOR_OVERALL_PATH  color0:color-1\",\r\n  \"COLOR_ACTIVE_LABEL  color0:color-1 reverse\",\r\n  \"COLOR_BG            color0:color-1\",\r\n  \"COLOR_DEFAULT       color0:color-1\",\r\n  \"COLOR_PROGRESS      color0:color-1 reverse\",\r\n};\r\n\r\n\/* *INDENT-ON* *\/\r\n\r\n\/* Allocate memory for color elements *\/\r\nstatic GColors *\r\nnew_gcolors (void)\r\n{\r\n  GColors *color = xcalloc (1, sizeof (GColors));\r\n  color->module = -1;\r\n\r\n  return color;\r\n}\r\n\r\n\/* Allocate memory for a color element properties *\/\r\nstatic GColorPair *\r\nnew_gcolorpair (void)\r\n{\r\n  GColorPair *pair = xcalloc (1, sizeof (GColorPair));\r\n  \/* Must be between 2 and COLOR_PAIRS-1.\r\n   * Starts at 2 since COLOR_NORMAL has already been set *\/\r\n  pair->idx = 2;\r\n\r\n  return pair;\r\n}\r\n\r\n\/* Free malloc'd memory for color elements *\/\r\nvoid\r\nfree_color_lists (void)\r\n{\r\n  if (pair_list)\r\n    list_remove_nodes (pair_list);\r\n  if (color_list)\r\n    list_remove_nodes (color_list);\r\n  color_list = NULL;\r\n  pair_list = NULL;\r\n}\r\n\r\n\/* Set a default color - COLOR_NORMAL, this will be used if\r\n * no colors are supported by the terminal *\/\r\nvoid\r\nset_normal_color (void)\r\n{\r\n  GColorPair *pair = new_gcolorpair ();\r\n  GColors *color = new_gcolors ();\r\n\r\n  pair->idx = 1;\r\n  pair->fg = COLOR_WHITE;\r\n  pair->bg = -1;\r\n\r\n  color->pair = pair;\r\n  color->item = COLOR_NORMAL;\r\n\r\n  pair_list = list_create (pair);\r\n  color_list = list_create (color);\r\n\r\n  init_pair (pair->idx, pair->fg, pair->bg);\r\n}\r\n\r\n\/* Get color properties for COLOR_OVERALL_LBLS *\/\r\nGColors *\r\ncolor_overall_lbls (void)\r\n{\r\n  return get_color (COLOR_OVERALL_LBLS);\r\n}\r\n\r\n\/* Get color properties for COLOR_OVERALL_VALS *\/\r\nGColors *\r\ncolor_overall_vals (void)\r\n{\r\n  return get_color (COLOR_OVERALL_VALS);\r\n}\r\n\r\n\/* Get color properties for COLOR_OVERALL_PATH *\/\r\nGColors *\r\ncolor_overall_path (void)\r\n{\r\n  return get_color (COLOR_OVERALL_PATH);\r\n}\r\n\r\n\/* Get color properties for COLOR_PANEL_HEADER *\/\r\nGColors *\r\ncolor_panel_header (void)\r\n{\r\n  return get_color (COLOR_PANEL_HEADER);\r\n}\r\n\r\n\/* Get color properties for COLOR_PANEL_DESC *\/\r\nGColors *\r\ncolor_panel_desc (void)\r\n{\r\n  return get_color (COLOR_PANEL_DESC);\r\n}\r\n\r\n\/* Get color properties for COLOR_PANEL_ACTIVE*\/\r\nGColors *\r\ncolor_panel_active (void)\r\n{\r\n  return get_color (COLOR_PANEL_ACTIVE);\r\n}\r\n\r\n\/* Get color properties for COLOR_SELECTED *\/\r\nGColors *\r\ncolor_selected (void)\r\n{\r\n  return get_color (COLOR_SELECTED);\r\n}\r\n\r\n\/* Get color properties for COLOR_PROGRESS *\/\r\nGColors *\r\ncolor_progress (void)\r\n{\r\n  return get_color (COLOR_PROGRESS);\r\n}\r\n\r\n\/* Get color properties for COLOR_DEFAULT *\/\r\nGColors *\r\ncolor_default (void)\r\n{\r\n  return get_color (COLOR_DEFAULT);\r\n}\r\n\r\n\/* Get color properties for COLOR_ERROR *\/\r\nGColors *\r\ncolor_error (void)\r\n{\r\n  return get_color (COLOR_ERROR);\r\n}\r\n\r\n\/* Get the enumerated color given its equivalent color string.\r\n *\r\n * On error, -1 is returned.\r\n * On success, the enumerated color is returned. *\/\r\nstatic int\r\nget_color_item_enum (const char *str)\r\n{\r\n  return str2enum (CSTM_COLORS, ARRAY_SIZE (CSTM_COLORS), str);\r\n}\r\n\r\n\/* Extract color number from the given config string.\r\n *\r\n * On error, -2 is returned. If color is greater than max colors, it aborts.\r\n * On success, the color number is returned. *\/\r\nstatic int\r\nextract_color (char *color)\r\n{\r\n  char *sEnd;\r\n  int col = 0;\r\n\r\n  if (strncasecmp (color, \"color\", 5) != 0)\r\n    return -2;\r\n\r\n  color += 5;\r\n  col = strtol (color, &sEnd, 10);\r\n  if (color == sEnd || *sEnd != '\\0' || errno == ERANGE)\r\n    return -2;\r\n  \/* ensure used color is supported by the terminal *\/\r\n  if (col > COLORS)\r\n    FATAL (\"Terminal doesn't support color: %d - max colors: %d\", col, COLORS);\r\n\r\n  return col;\r\n}\r\n\r\n\/* Assign the background and foreground color number from the given\r\n * config string to GColorPair.\r\n *\r\n * On error, 1 is returned.\r\n * On success, 0 is returned. *\/\r\nstatic int\r\nparse_bg_fg_color (GColorPair * pair, const char *value)\r\n{\r\n  char bgcolor[COLOR_STR_LEN] = \"\", fgcolor[COLOR_STR_LEN] = \"\";\r\n  int ret = 0;\r\n\r\n  if (sscanf (value, \"%8[^:]:%8[^ ]\", fgcolor, bgcolor) != 2)\r\n    return 1;\r\n\r\n  if ((pair->bg = extract_color (bgcolor)) == -2)\r\n    ret = 1;\r\n\r\n  if ((pair->fg = extract_color (fgcolor)) == -2)\r\n    ret = 1;\r\n\r\n  return ret;\r\n}\r\n\r\n\/* Assign color attributes from the given config string to GColors. *\/\r\nstatic void\r\nlocate_attr_color (GColors * color, const char *attr)\r\n{\r\n  if (strstr (attr, \"bold\"))\r\n    color->attr |= A_BOLD;\r\n  if (strstr (attr, \"underline\"))\r\n    color->attr |= A_UNDERLINE;\r\n  if (strstr (attr, \"normal\"))\r\n    color->attr |= A_NORMAL;\r\n  if (strstr (attr, \"reverse\"))\r\n    color->attr |= A_REVERSE;\r\n  if (strstr (attr, \"standout\"))\r\n    color->attr |= A_REVERSE;\r\n  if (strstr (attr, \"blink\"))\r\n    color->attr |= A_BLINK;\r\n}\r\n\r\n\/* Parse color attributes from the given config string.\r\n *\r\n * On error, 1 is returned.\r\n * On success, 0 is returned. *\/\r\nstatic int\r\nparse_attr_color (GColors * color, const char *value)\r\n{\r\n  char *line, *ptr, *start;\r\n  int ret = 0;\r\n\r\n  line = xstrdup (value);\r\n\r\n  start = strchr (line, ' ');\r\n  if ((!start) || (!*(start + 1))) {\r\n    LOG_DEBUG ((\"attempted to parse color attr: %s\\n\", value));\r\n    goto clean;\r\n  }\r\n\r\n  start++;\r\n  while (1) {\r\n    if ((ptr = strpbrk (start, \", \")) != NULL)\r\n      *ptr = 0;\r\n    locate_attr_color (color, start);\r\n    if (ptr == NULL)\r\n      break;\r\n    start = ptr + 1;\r\n  }\r\n\r\nclean:\r\n  free (line);\r\n\r\n  return ret;\r\n}\r\n\r\n\/* Parse color module from the given config string.\r\n *\r\n * On error, 1 is returned.\r\n * On success, 0 is returned. *\/\r\nstatic int\r\nparse_module_color (GColors * color, const char *value)\r\n{\r\n  char *line = xstrdup (value), *p;\r\n\r\n  p = strrchr (line, ' ');\r\n  if (!p || !*(p + 1)) {\r\n    LOG_DEBUG ((\"attempted to parse color module: %s\\n\", value));\r\n    goto clean;\r\n  }\r\n\r\n  if ((color->module = get_module_enum (p + 1)) == -1)\r\n    LOG_DEBUG ((\"attempted to parse color module: %s\\n\", value));\r\n\r\nclean:\r\n  free (line);\r\n\r\n  return 0;\r\n}\r\n\r\n\/* Find a color by item and module attributes on the list of already\r\n * parsed colors.\r\n *\r\n * If color exists, 1 is returned.\r\n * If color does not exist, 1 is returned. *\/\r\nstatic int\r\nfind_color_in_list (void *data, void *color)\r\n{\r\n  GColors *new_color = color;\r\n  GColors *old_color = data;\r\n\r\n  if (old_color->item != new_color->item)\r\n    return 0;\r\n  if (old_color->module != new_color->module)\r\n    return 0;\r\n  return 1;\r\n}\r\n\r\n\/* Find a color by foreground and background attributes on the list of\r\n * already parsed colors.\r\n *\r\n * If color exists, 1 is returned.\r\n * If color does not exist, 1 is returned. *\/\r\nstatic int\r\nfind_pair_in_list (void *data, void *color)\r\n{\r\n  GColorPair *new_color = color;\r\n  GColorPair *old_color = data;\r\n\r\n  if (old_color->fg != new_color->fg)\r\n    return 0;\r\n  if (old_color->bg != new_color->bg)\r\n    return 0;\r\n  return 1;\r\n}\r\n\r\n\/* Compare a color item (GColorItem) that has no module with the given needle\r\n * item.\r\n *\r\n * If the items match and with no module, 1 is returned.\r\n * If condition is not satisfied, 0 is returned. *\/\r\nstatic int\r\nfind_color_item_in_list (void *data, void *needle)\r\n{\r\n  GColors *color = data;\r\n  GColorItem *item = needle;\r\n\r\n  return color->item == (GColorItem) (*(int *) item) && color->module == -1;\r\n}\r\n\r\n\/* Compare a color item (GColorItem) and module with the given needle item.\r\n *\r\n * If the items match and with no module, 1 is returned.\r\n * If condition is not satisfied, 0 is returned. *\/\r\nstatic int\r\nfind_color_item_module_in_list (void *data, void *needle)\r\n{\r\n  GColors *color = data;\r\n  GColors *item = needle;\r\n\r\n  return color->item == item->item && color->module == item->module;\r\n}\r\n\r\n\/* Get color item properties given an item (enumerated).\r\n *\r\n * On error, it aborts.\r\n * On success, the color item properties are returned, or NULL if no match\r\n * found. *\/\r\nGColors *\r\nget_color (GColorItem item)\r\n{\r\n  GColorItem normal = COLOR_NORMAL;\r\n  GSLList *match = NULL;\r\n\r\n  if ((match = list_find (color_list, find_color_item_in_list, &item)))\r\n    return (GColors *) match->data;\r\n\r\n  if ((match = list_find (color_list, find_color_item_in_list, &normal)))\r\n    return (GColors *) match->data;\r\n\r\n  \/* should not get here *\/\r\n  FATAL (\"Unable to find color item %d\", item);\r\n}\r\n\r\n\/* Get color item properties given an item (enumerated) and its module.\r\n *\r\n * On error, it aborts.\r\n * On success, the color item properties are returned, or NULL if no match\r\n * found. *\/\r\nGColors *\r\nget_color_by_item_module (GColorItem item, GModule module)\r\n{\r\n  GColors *needle = new_gcolors (), *color = NULL;\r\n  GSLList *match = NULL;\r\n\r\n  needle->module = module;\r\n  needle->item = item;\r\n\r\n  \/* find color for specific item\/module pair *\/\r\n  if ((match = list_find (color_list, find_color_item_module_in_list, needle)))\r\n    color = match->data;\r\n\r\n  \/* attempt to find color by item (fallback) *\/\r\n  if (!color)\r\n    color = get_color (item);\r\n  free (needle);\r\n\r\n  return color;\r\n}\r\n\r\n\/* Parse a color definition line from the config file.\r\n *\r\n * On error, it aborts.\r\n * On success, the color properties are assigned *\/\r\nstatic void\r\nparse_color_line (GColorPair * pair, GColors * color, char *line)\r\n{\r\n  char *val;\r\n  int item = 0;\r\n  size_t idx;\r\n\r\n  \/* key *\/\r\n  idx = strcspn (line, \" \\t\");\r\n  if (strlen (line) == idx)\r\n    FATAL (\"Malformed color key at line: %s\", line);\r\n\r\n  line[idx] = '\\0';\r\n  if ((item = get_color_item_enum (line)) == -1)\r\n    FATAL (\"Unable to find color key: %s\", line);\r\n\r\n  \/* value *\/\r\n  val = line + (idx + 1);\r\n  idx = strspn (val, \" \\t\");\r\n  if (strlen (line) == idx)\r\n    FATAL (\"Malformed color value at line: %s\", line);\r\n  val = val + idx;\r\n\r\n  \/* get background\/foreground color *\/\r\n  if (parse_bg_fg_color (pair, val) == 1)\r\n    FATAL (\"Invalid bg\/fg color pairs at: %s %s\", line, val);\r\n\r\n  if (parse_attr_color (color, val) == 1)\r\n    FATAL (\"Invalid color attrs at: %s %s\", line, val);\r\n\r\n  if (parse_module_color (color, val) == 1)\r\n    FATAL (\"Invalid color module at: %s %s\", line, val);\r\n\r\n  color->item = item;\r\n}\r\n\r\n\/* Parse a color definition line from the config file and store it on a signle\r\n * linked-list.\r\n *\r\n * On error, it aborts.\r\n * On success, the color properties are stored *\/\r\nstatic void\r\nparse_color (char *line)\r\n{\r\n  GSLList *match = NULL;\r\n  GColors *color = NULL;\r\n  GColorPair *pair = NULL;\r\n\r\n  color = new_gcolors ();\r\n  pair = new_gcolorpair ();\r\n\r\n  parse_color_line (pair, color, line);\r\n\r\n  if (pair_list == NULL) {\r\n    pair_list = list_create (pair);\r\n  } else if ((match = list_find (pair_list, find_pair_in_list, pair))) {\r\n    free (pair);\r\n    pair = (GColorPair *) match->data;\r\n  } else {\r\n    pair->idx += list_count (pair_list);\r\n    pair_list = list_insert_prepend (pair_list, pair);\r\n  }\r\n  color->pair = pair;\r\n\r\n  if (color_list == NULL)\r\n    color_list = list_create (color);\r\n  else if (list_find (color_list, find_color_in_list, color))\r\n    free (color);\r\n  else\r\n    color_list = list_insert_prepend (color_list, color);\r\n\r\n  if (!match) {\r\n    init_pair (color->pair->idx, color->pair->fg, color->pair->bg);\r\n  }\r\n\r\n  free (line);\r\n}\r\n\r\n\/* Iterate over all color definitions in the config file.\r\n *\r\n * On error, it aborts.\r\n * On success, the color properties are parsed and stored *\/\r\nstatic void\r\nparse_colors (const char *colors[], size_t n)\r\n{\r\n  char *line;\r\n  size_t i;\r\n\r\n  for (i = 0; i < n; ++i) {\r\n    line = strdup (colors[i]);\r\n    \/* did not find a valid format *\/\r\n    if (strchr (line, ':') == NULL) {\r\n      free (line);\r\n      continue;\r\n    }\r\n    parse_color (line);\r\n  }\r\n}\r\n\r\n\/* Use default color definitions if necessary. *\/\r\nstatic void\r\nadd_default_colors (void)\r\n{\r\n  \/* no colors *\/\r\n  if (COLORS < 8)\r\n    parse_colors (nocolors, ARRAY_SIZE (nocolors));\r\n\r\n  \/* 256 colors, and no color scheme set or set to monokai *\/\r\n  if (COLORS == 256 && (!conf.color_scheme || conf.color_scheme == MONOKAI))\r\n    parse_colors (colors256_monokai, ARRAY_SIZE (colors256_monokai));\r\n  \/* otherwise use 16 colors scheme *\/\r\n  else if (COLORS > 16) {\r\n    if (conf.color_scheme == STD_GREEN)\r\n      parse_colors (colors256_green, ARRAY_SIZE (colors256_green));\r\n    else\r\n      parse_colors (colors256_mono, ARRAY_SIZE (colors256_mono));\r\n  }\r\n\r\n  \/* 8 colors *\/\r\n  if (COLORS >= 8 && COLORS <= 16) {\r\n    if (conf.color_scheme == STD_GREEN)\r\n      parse_colors (colors8_green, ARRAY_SIZE (colors8_green));\r\n    else\r\n      parse_colors (colors8_mono, ARRAY_SIZE (colors8_mono));\r\n  }\r\n\r\n}\r\n\r\n\/* Entry point to parse color definitions or use default colors *\/","pos":1}}
