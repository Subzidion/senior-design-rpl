{"go.line_comments":{"pos":1,"text":"\/* This file is sourced under MIT license from siddontang\/go. This is an example\r\nof block comments in go *\/\r\n\r\npackage rpc\r\n\r\nimport (\r\n\t\"container\/list\"\r\n\t\"fmt\"\r\n\t\"reflect\"\r\n\t\"sync\"\r\n)\r\n\r\ntype Client struct { \/\/ Client struct\r\n\tsync.Mutex\r\n\r\n\tnetwork string\r\n\taddr    string\r\n\r\n\tmaxIdleConns int\r\n\r\n\tconns *list.List\r\n}\r\n\r\n\/\/ MakeRpc function\r\nfunc (c *Client) MakeRpc(rpcName string, fptr interface{}) (err error) {\r\n\tdefer func() {\r\n\t\tif e := recover(); e != nil {\r\n\t\t\terr = fmt.Errorf(\"make rpc error\")\r\n\t\t}\r\n\t}()\r\n\r\n\tfn := reflect.ValueOf(fptr).Elem()\r\n\r\n\tnOut := fn.Type().NumOut()\r\n\tif nOut == 0 || fn.Type().Out(nOut-1).Kind() != reflect.Interface {\r\n\t\terr = fmt.Errorf(\"%s return final output param must be error interface\", rpcName)\r\n\t\treturn\r\n\t}\r\n\r\n\t_, b := fn.Type().Out(nOut - 1).MethodByName(\"Error\")\r\n\tif !b {\r\n\t\terr = fmt.Errorf(\"%s return final output param must be error interface\", rpcName)\r\n\t\treturn\r\n\t}\r\n\r\n\tf := func(in []reflect.Value) []reflect.Value {\r\n\t\treturn c.call(fn, rpcName, in)\r\n\t}\r\n\r\n\tv := reflect.MakeFunc(fn.Type(), f)\r\n\tfn.Set(v)\r\n\r\n\treturn\r\n}\r\n","subs":[{"go.line_comment":{"pos":191,"text":"type Client struct { \/\/ Client struct\r","subs":[{"go.line_comment_context":{"pos":191,"text":"type Client struct { "}},{"go.line_comment_body":{"pos":212,"text":"\/\/ Client struct\r","subs":[{"go.line_comment_text":{"pos":214,"text":" Client struct\r"}}]}}]}},{"go.line_comment":{"pos":326,"text":"\/\/ MakeRpc function\r","subs":[{"go.line_comment_context":{"pos":326,"text":""}},{"go.line_comment_body":{"pos":326,"text":"\/\/ MakeRpc function\r","subs":[{"go.line_comment_text":{"pos":328,"text":" MakeRpc function\r"}}]}}]}}]}}
