--Inline Comments
alias g.line_comment_start= "//"
g.line_comment_text= {!line_end .}*
alias g.line_comment_pre= {!g.line_comment_start !line_end .}*
g.line_comment_context= {!g.line_comment_start !line_end .}*
g.line_comment_body= {g.line_comment_start g.line_comment_text}
g.line_comment= {g.line_comment_context g.line_comment_body}
g.line_comments= {{g.line_comment / g.line_comment_body / g.line_comment_pre} .}*

--Block Comments
alias g.block_comment_start = "/*"
alias g.block_comment_end = "*/"
alias g.block_comment_pre= {!g.block_comment_start.}*
g.block_comment_body= {!g.block_comment_end .}*
g.block_comment= { g.block_comment_start g.block_comment_body g.block_comment_end}
g.block_comments= {g.block_comment_pre g.block_comment }*

--Dependencies
alias g.import = "import "
alias g.indent = {"\t" / " "}*
g.dependencies_text = {!{["] line_end} .}*
g.dependencies_single = {{g.import ["]} g.dependencies_text {["]}}
g.import_list = {g.indent ["] g.dependencies_text {["] line_end} .}*
g.dependencies_factor = {g.import "(" line_end g.import_list}
alias g.dependencies_pre = {!g.import !line_end .}*

g.package_text = {!statement_end !line_end .}*
g.package = {"package " g.package_text}

g.dependencies = {{g.package / g.dependencies_single / g.dependencies_factor / g.dependencies_pre} line_end}*

--Function Definitions
g.func = "func "
alias g.start_paren = "("
alias g.end_paren = ")"
alias g.whitespace = [:space:]

g.function_name = {!g.start_paren .}*
g.single_param = {!g.end_paren ![,] .}*
alias g.multi_param =  {[,] g.single_param }*
g.parameters = {g.start_paren g.single_param g.multi_param g.end_paren}

g.single_return = {!g.end_paren ![,] .}*
alias g.multi_return =  {[,] g.single_return }*
g.return = {g.whitespace g.start_paren g.single_return g.multi_return g.end_paren}
g.return_type = {g.whitespace {!"{" .}*}
g.function_call = {g.func g.function_name g.parameters {g.return / g.return_type}?}

g.functions = {g.function_call / .}*

--Struct Definitions
alias g.type = "type "
alias g.struct = "struct "
alias g.struct_name = {!g.struct .}*

g.struct_def = {g.type g.struct_name g.struct}
g.structs = {g.struct_def / .}*
